1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.010s CPU, 0.027s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.002s wall-clock]
Generated 152 rules.
Computing model... [0.010s CPU, 0.006s wall-clock]
503 relevant atoms
400 auxiliary atoms
903 final queue length
1573 total queue pushes
Completing instantiation... [0.000s CPU, 0.008s wall-clock]
Instantiating: [0.010s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
14 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
41 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.010s CPU, 0.011s wall-clock]
300 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 202
Translator goal facts: 1
Translator mutex groups: 20
Translator total mutex groups size: 220
Translator operators: 301
Translator axioms: 0
Translator task size: 4377
Translator peak memory: 21624 KB
Writing output... [0.000s CPU, 0.003s wall-clock]
Done! [0.040s CPU, 0.067s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
51 variables of 51 necessary
10 of 20 mutex groups necessary.
301 of 301 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 202
Preprocessor derived variables: 0
Preprocessor task size: 4267
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 51
Bytes per state: 12

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 111 state(s).
Dead ends: 0 state(s). (0 recorded)
perform_operation_1_fault_DETDUP_0 o1 (1)
perform_operation_1_fault_DETDUP_0 o10 (1)
perform_operation_1_fault_DETDUP_0 o2 (1)
perform_operation_1_fault_DETDUP_0 o3 (1)
perform_operation_1_fault_DETDUP_0 o4 (1)
perform_operation_1_fault_DETDUP_0 o5 (1)
perform_operation_1_fault_DETDUP_0 o6 (1)
perform_operation_1_fault_DETDUP_0 o7 (1)
perform_operation_1_fault_DETDUP_0 o8 (1)
perform_operation_1_fault_DETDUP_0 o9 (1)
finish  (1)
Plan length: 11 step(s).
Plan cost: 11
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 3 state(s).
Dead ends: 0 state(s).
Generated 5 state(s).
Dead ends: 0 state(s).
Generated 7 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).
Generated 11 state(s).
Dead ends: 0 state(s).
Generated 13 state(s).
Dead ends: 0 state(s).
Generated 15 state(s).
Dead ends: 0 state(s).
Generated 17 state(s).
Dead ends: 0 state(s).
Generated 19 state(s).
Dead ends: 0 state(s).

Could not close 0 of 9 open leaf states.
Investigated 40 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 18 +/- 0
                       Replans: 0 +/- 0
                       Actions: 18 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 21
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.04s
              Using the policy: 0.02s
          Just-in-case Repairs: 0.04s
                Simulator time: 0s
                    Total time: 0.04s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 7060 KB

If holds: var40:0
Execute: goal / SC / d=0

If holds: var31:1 var9:0 var8:0 var7:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: finish  / SC / d=1

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var44:0 var29:10 var43:0 var41:0 var8:0 var7:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o9 / SC / d=2

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var44:0 var28:10 var29:10 var43:0 var41:0 var7:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o8 / SC / d=3

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o7 / SC / d=4

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var44:0 var28:0 var29:10 var43:0 var30:0 var7:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o8 / SC / d=4

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o6 / SC / d=5

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var27:0 var44:0 var28:10 var29:10 var43:0 var30:0 var6:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o7 / SC / d=5

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o5 / SC / d=6

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var26:0 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var5:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o6 / SC / d=6

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var3:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o4 / SC / d=7

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var25:0 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var4:0 var3:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o5 / SC / d=7

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var2:0 var1:0 var0:0
Execute: perform_operation_1_fault o3 / SC / d=8

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var45:0 var24:0 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var3:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o4 / SC / d=8

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var22:10 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var1:0 var0:0
Execute: perform_operation_1_fault o2 / SC / d=9

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var23:0 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var2:0 var1:0 var0:0
Execute: repair_fault_1 o3 / SC / d=9

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var21:10 var22:10 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0 var0:0
Execute: perform_operation_1_fault o10 / SC / d=10

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var22:0 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var1:0 var0:0
Execute: repair_fault_1 o2 / SC / d=10

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var20:10 var21:10 var22:10 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var41:0
Execute: perform_operation_1_fault o1 / SC / d=11

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var21:0 var22:10 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0 var0:0
Execute: repair_fault_1 o10 / SC / d=11

If holds: var31:1 var42:0 var50:0 var49:0 var48:0 var47:0 var46:0 var20:0 var21:10 var22:10 var23:10 var45:0 var24:10 var25:10 var26:10 var27:10 var44:0 var28:10 var29:10 var43:0 var30:0
Execute: repair_fault_1 o1 / SC / d=12
