1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.049s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 67 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
500 relevant atoms
1276 auxiliary atoms
1776 final queue length
2108 total queue pushes
Completing instantiation... [0.000s CPU, 0.006s wall-clock]
Instantiating: [0.020s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
4 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
2 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.008s wall-clock]
182 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 1 = <none of those>
0 operators removed
1 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Translator variables: 3
Translator derived variables: 0
Translator facts: 36
Translator goal facts: 2
Translator mutex groups: 1
Translator total mutex groups size: 32
Translator operators: 306
Translator axioms: 0
Translator task size: 1843
Translator peak memory: 20632 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.030s CPU, 0.079s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
3 variables of 3 necessary
0 of 1 mutex groups necessary.
306 of 306 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 36
Preprocessor derived variables: 0
Preprocessor task size: 1811
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 3
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 201 state(s).
Dead ends: 31 state(s). (31 recorded)
climb p0 (1)
jump-over_DETDUP_5 p0 p1 p2 (1)
jump-over_DETDUP_5 p2 p3 p4 (1)
jump-over_DETDUP_5 p4 p5 p6 (1)
jump-over_DETDUP_5 p6 p7 p8 (1)
jump-over_DETDUP_5 p8 p9 p10 (1)
jump-over_DETDUP_5 p10 p11 p12 (1)
jump-over_DETDUP_5 p12 p13 p14 (1)
jump-over_DETDUP_5 p14 p15 p16 (1)
jump-over_DETDUP_5 p16 p17 p18 (1)
jump-over_DETDUP_5 p18 p19 p20 (1)
jump-over_DETDUP_5 p20 p21 p22 (1)
jump-over_DETDUP_5 p22 p23 p24 (1)
jump-over_DETDUP_5 p24 p25 p26 (1)
jump-over_DETDUP_5 p26 p27 p28 (1)
jump-over_DETDUP_5 p28 p29 p30 (1)
walk-on-beam_DETDUP_0 p30 p31 (1)
Plan length: 17 step(s).
Plan cost: 17
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 8 state(s).
Dead ends: 0 state(s).

Could not close 0 of 1 open leaf states.
Investigated 3 states for the strong cyclic plan.
Went through another policy of score 0
Generated 95 state(s).
Dead ends: 0 state(s).
Generated 61 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 96 states for the strong cyclic plan.
Found a better policy of score 0

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 1000 +/- 0
                       Replans: 0 +/- 0
                       Actions: 1000 +/- 0
             Recorded Deadends: 76
            State-Action Pairs: 64
  Forbidden State-Action Pairs: 265
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 0 / 1
 Depth limit (of 1000) reached: 1 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 4.76s
              Using the policy: 2.53s
          Just-in-case Repairs: 4.76s
                Simulator time: 0s
                    Total time: 4.76s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 6336 KB

If holds: var2:0 var1:25
Execute: goal / SC / d=0

If holds: var0:1 var2:0 var1:24
Execute: walk-on-beam p30 p31 / SC / d=1

If holds: var0:1 var2:0 var1:22
Execute: walk-on-beam p29 p30 / SC / d=2

If holds: var0:1 var2:0 var1:21
Execute: walk-on-beam p28 p29 / SC / d=3

If holds: var0:1 var2:0 var1:20
Execute: walk-on-beam p27 p28 / SC / d=4

If holds: var0:1 var2:0 var1:19
Execute: walk-on-beam p26 p27 / SC / d=5

If holds: var0:1 var2:0 var1:18
Execute: walk-on-beam p25 p26 / SC / d=6

If holds: var0:1 var2:0 var1:17
Execute: walk-on-beam p24 p25 / SC / d=7

If holds: var0:1 var2:0 var1:16
Execute: walk-on-beam p23 p24 / SC / d=8

If holds: var0:1 var2:0 var1:15
Execute: walk-on-beam p22 p23 / SC / d=9

If holds: var0:1 var2:0 var1:14
Execute: walk-on-beam p21 p22 / SC / d=10

If holds: var0:1 var2:0 var1:13
Execute: walk-on-beam p20 p21 / SC / d=11

If holds: var0:1 var2:0 var1:11
Execute: walk-on-beam p19 p20 / SC / d=12

If holds: var0:1 var2:0 var1:10
Execute: walk-on-beam p18 p19 / SC / d=13

If holds: var0:1 var2:0 var1:9
Execute: walk-on-beam p17 p18 / SC / d=14

If holds: var0:1 var2:0 var1:8
Execute: walk-on-beam p16 p17 / SC / d=15

If holds: var0:1 var2:0 var1:7
Execute: walk-on-beam p15 p16 / SC / d=16

If holds: var0:1 var2:0 var1:6
Execute: walk-on-beam p14 p15 / SC / d=17

If holds: var0:1 var2:0 var1:5
Execute: walk-on-beam p13 p14 / SC / d=18

If holds: var0:1 var2:0 var1:4
Execute: walk-on-beam p12 p13 / SC / d=19

If holds: var0:1 var2:0 var1:3
Execute: walk-on-beam p11 p12 / SC / d=20

If holds: var0:1 var2:0 var1:2
Execute: walk-on-beam p10 p11 / SC / d=21

If holds: var0:1 var2:0 var1:31
Execute: walk-on-beam p9 p10 / SC / d=22

If holds: var0:1 var2:0 var1:30
Execute: walk-on-beam p8 p9 / SC / d=23

If holds: var0:1 var2:0 var1:29
Execute: walk-on-beam p7 p8 / SC / d=24

If holds: var0:1 var2:0 var1:28
Execute: walk-on-beam p6 p7 / SC / d=25

If holds: var0:1 var2:0 var1:27
Execute: walk-on-beam p5 p6 / SC / d=26

If holds: var0:1 var2:0 var1:26
Execute: walk-on-beam p4 p5 / SC / d=27

If holds: var0:1 var2:0 var1:23
Execute: walk-on-beam p3 p4 / SC / d=28

If holds: var0:1 var2:0 var1:12
Execute: walk-on-beam p2 p3 / SC / d=29

If holds: var0:1 var2:0 var1:1
Execute: walk-on-beam p1 p2 / SC / d=30

If holds: var0:1 var2:0 var1:0
Execute: walk-on-beam p0 p1 / SC / d=31

If holds: var0:1 var2:1 var1:0
Execute: climb p0 / SC / d=32

If holds: var0:1 var2:1 var1:1
Execute: walk-left p1 p0 / SC / d=33

If holds: var0:1 var2:1 var1:12
Execute: walk-left p2 p1 / SC / d=34

If holds: var0:1 var2:1 var1:23
Execute: walk-left p3 p2 / SC / d=35

If holds: var0:1 var2:1 var1:26
Execute: walk-left p4 p3 / SC / d=36

If holds: var0:1 var2:1 var1:27
Execute: walk-left p5 p4 / SC / d=37

If holds: var0:1 var2:1 var1:28
Execute: walk-left p6 p5 / SC / d=38

If holds: var0:1 var2:1 var1:29
Execute: walk-left p7 p6 / SC / d=39

If holds: var0:1 var2:1 var1:30
Execute: walk-left p8 p7 / SC / d=40

If holds: var0:1 var2:1 var1:31
Execute: walk-left p9 p8 / SC / d=41

If holds: var0:1 var2:1 var1:2
Execute: walk-left p10 p9 / SC / d=42

If holds: var0:1 var2:1 var1:3
Execute: walk-left p11 p10 / SC / d=43

If holds: var0:1 var2:1 var1:4
Execute: walk-left p12 p11 / SC / d=44

If holds: var0:1 var2:1 var1:5
Execute: walk-left p13 p12 / SC / d=45

If holds: var0:1 var2:1 var1:6
Execute: walk-left p14 p13 / SC / d=46

If holds: var0:1 var2:1 var1:7
Execute: walk-left p15 p14 / SC / d=47

If holds: var0:1 var2:1 var1:8
Execute: walk-left p16 p15 / SC / d=48

If holds: var0:1 var2:1 var1:9
Execute: walk-left p17 p16 / SC / d=49

If holds: var0:1 var2:1 var1:10
Execute: walk-left p18 p17 / SC / d=50

If holds: var0:1 var2:1 var1:11
Execute: walk-left p19 p18 / SC / d=51

If holds: var0:1 var2:1 var1:13
Execute: walk-left p20 p19 / SC / d=52

If holds: var0:1 var2:1 var1:14
Execute: walk-left p21 p20 / SC / d=53

If holds: var0:1 var2:1 var1:15
Execute: walk-left p22 p21 / SC / d=54

If holds: var0:1 var2:1 var1:16
Execute: walk-left p23 p22 / SC / d=55

If holds: var0:1 var2:1 var1:17
Execute: walk-left p24 p23 / SC / d=56

If holds: var0:1 var2:1 var1:18
Execute: walk-left p25 p24 / SC / d=57

If holds: var0:1 var2:1 var1:19
Execute: walk-left p26 p25 / SC / d=58

If holds: var0:1 var2:1 var1:20
Execute: walk-left p27 p26 / SC / d=59

If holds: var0:1 var2:1 var1:21
Execute: walk-left p28 p27 / SC / d=60

If holds: var0:1 var2:1 var1:22
Execute: walk-left p29 p28 / SC / d=61

If holds: var0:1 var2:1 var1:24
Execute: walk-left p30 p29 / SC / d=62

If holds: var0:1 var2:1 var1:25
Execute: walk-left p31 p30 / SC / d=63
