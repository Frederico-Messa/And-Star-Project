1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 18 rules.
Computing model... [0.000s CPU, 0.001s wall-clock]
71 relevant atoms
67 auxiliary atoms
138 final queue length
152 total queue pushes
Completing instantiation... [0.000s CPU, 0.000s wall-clock]
Instantiating: [0.000s CPU, 0.002s wall-clock]
Computing fact groups...
Finding invariants...
3 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.000s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.000s wall-clock]
7 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 0 = <none of those>
0 operators removed
1 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Translator variables: 2
Translator derived variables: 0
Translator facts: 10
Translator goal facts: 2
Translator mutex groups: 1
Translator total mutex groups size: 8
Translator operators: 22
Translator axioms: 0
Translator task size: 117
Translator peak memory: 19180 KB
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.004s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
2 variables of 2 necessary
0 of 1 mutex groups necessary.
22 of 22 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 10
Preprocessor derived variables: 0
Preprocessor task size: 109
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 2
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 15 state(s).
Dead ends: 0 state(s). (0 recorded)
climb p0 (1)
walk-on-beam_DETDUP_0 p0 p1 (1)
walk-on-beam_DETDUP_0 p1 p2 (1)
walk-on-beam_DETDUP_0 p2 p3 (1)
walk-on-beam_DETDUP_0 p3 p4 (1)
walk-on-beam_DETDUP_0 p4 p5 (1)
walk-on-beam_DETDUP_0 p5 p6 (1)
walk-on-beam_DETDUP_0 p6 p7 (1)
Plan length: 8 step(s).
Plan cost: 8
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 7 state(s).
Dead ends: 0 state(s).

Could not close 0 of 1 open leaf states.
Investigated 24 states for the strong cyclic plan.
Went through another policy of score 0.786

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 1000 +/- 0
                       Replans: 0 +/- 0
                       Actions: 1000 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 16
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 0 / 1
 Depth limit (of 1000) reached: 1 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.19s
              Using the policy: 0.11s
          Just-in-case Repairs: 0.19s
                Simulator time: 0s
                    Total time: 0.19s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 4564 KB

If holds: var1:0 var0:7
Execute: goal / SC / d=0

If holds: var1:0 var0:6
Execute: walk-on-beam p6 p7 / SC / d=1

If holds: var1:0 var0:5
Execute: walk-on-beam p5 p6 / SC / d=2

If holds: var1:0 var0:4
Execute: walk-on-beam p4 p5 / SC / d=3

If holds: var1:0 var0:3
Execute: walk-on-beam p3 p4 / SC / d=4

If holds: var1:0 var0:2
Execute: walk-on-beam p2 p3 / SC / d=5

If holds: var1:0 var0:1
Execute: walk-on-beam p1 p2 / SC / d=6

If holds: var1:0 var0:0
Execute: walk-on-beam p0 p1 / SC / d=7

If holds: var1:1 var0:0
Execute: climb p0 / SC / d=8

If holds: var1:1 var0:1
Execute: walk p1 p0 / SC / d=9

If holds: var1:1 var0:2
Execute: walk p2 p1 / SC / d=10

If holds: var1:1 var0:3
Execute: walk p3 p2 / SC / d=11

If holds: var1:1 var0:4
Execute: walk p4 p3 / SC / d=12

If holds: var1:1 var0:5
Execute: walk p5 p4 / SC / d=13

If holds: var1:1 var0:6
Execute: walk p6 p5 / SC / d=14

If holds: var1:1 var0:7
Execute: walk p7 p6 / SC / d=15
