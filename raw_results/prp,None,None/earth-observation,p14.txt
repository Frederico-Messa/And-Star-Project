1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Trivial rules: Converted to facts.
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 22 rules.
Computing model... [0.000s CPU, 0.004s wall-clock]
363 relevant atoms
463 auxiliary atoms
826 final queue length
901 total queue pushes
Completing instantiation... [0.000s CPU, 0.001s wall-clock]
Instantiating: [0.000s CPU, 0.007s wall-clock]
Computing fact groups...
Finding invariants...
4 initial candidates
Finding invariants: [0.000s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
7 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.001s wall-clock]
7 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 0 = <none of those>
0 operators removed
1 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Translator variables: 8
Translator derived variables: 0
Translator facts: 49
Translator goal facts: 7
Translator mutex groups: 1
Translator total mutex groups size: 35
Translator operators: 109
Translator axioms: 0
Translator task size: 447
Translator peak memory: 19576 KB
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.020s CPU, 0.011s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
8 variables of 8 necessary
0 of 1 mutex groups necessary.
109 of 109 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 49
Preprocessor derived variables: 0
Preprocessor task size: 412
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 8
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 93 state(s).
Dead ends: 0 state(s). (0 recorded)
slew p14 p23 south-east (1)
slew p23 p33 (1)
slew p33 p42 south-east (1)
take-image_DETDUP_0 p42 p52 (1)
slew p52 p12 (1)
take-image_DETDUP_0 p12 p22 (1)
slew p22 p33 north-east (1)
slew p33 p44 north-east (1)
slew p44 p54 (1)
take-image_DETDUP_0 p54 p14 (1)
slew p14 p25 north-east (1)
take-image_DETDUP_0 p25 p35 (1)
slew p35 p45 (1)
take-image_DETDUP_0 p45 p55 (1)
slew p55 p16 north-east (1)
slew p16 p27 north-east (1)
slew p27 p37 (1)
take-image_DETDUP_0 p37 p47 (1)
slew p47 p57 (1)
take-image_DETDUP_0 p57 p17 (1)
Plan length: 20 step(s).
Plan cost: 20
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 6 state(s).
Dead ends: 0 state(s).
Generated 8 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).
Generated 15 state(s).
Dead ends: 0 state(s).
Generated 11 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).
Generated 6 state(s).
Dead ends: 0 state(s).

Could not close 0 of 7 open leaf states.
Investigated 58 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 36 +/- 0
                       Replans: 0 +/- 0
                       Actions: 36 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 42
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.02s
              Using the policy: 0.02s
          Just-in-case Repairs: 0.02s
                Simulator time: 0s
                    Total time: 0.02s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 4692 KB

If holds: var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:1
Execute: goal / SC / d=0

If holds: var0:34 var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:0
Execute: take-image p57 p17 / SC / d=1

If holds: var0:27 var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:0
Execute: slew p47 p57 / SC / d=2

If holds: var0:20 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: take-image p37 p47 / SC / d=3

If holds: var0:20 var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:0
Execute: slew p37 p47 / SC / d=3

If holds: var0:13 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p27 p37 / SC / d=4

If holds: var0:13 var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:0
Execute: slew p27 p37 / SC / d=4

If holds: var0:5 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p16 p27 north-east / SC / d=5

If holds: var0:6 var1:1 var2:1 var3:1 var4:1 var5:1 var6:1 var7:0
Execute: slew p17 p27 / SC / d=5

If holds: var0:6 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p17 p27 / SC / d=5

If holds: var0:32 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p55 p16 north-east / SC / d=6

If holds: var0:34 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p57 p17 / SC / d=6

If holds: var0:25 var1:1 var2:1 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: take-image p45 p55 / SC / d=7

If holds: var0:27 var1:1 var2:1 var3:0 var4:1 var5:1 var6:1 var7:0
Execute: slew p47 p57 / SC / d=7

If holds: var0:18 var1:1 var2:1 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p35 p45 / SC / d=8

If holds: var0:11 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: take-image p25 p35 / SC / d=9

If holds: var0:12 var1:1 var2:1 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p26 p35 south-east / SC / d=9

If holds: var0:3 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p14 p25 north-east / SC / d=10

If holds: var0:5 var1:1 var2:1 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p16 p26 / SC / d=10

If holds: var0:4 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p15 p25 / SC / d=10

If holds: var0:31 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: take-image p54 p14 / SC / d=11

If holds: var0:32 var1:1 var2:1 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p55 p16 north-east / SC / d=11

If holds: var0:33 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p56 p15 south-east / SC / d=11

If holds: var0:24 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p44 p54 / SC / d=12

If holds: var0:26 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p46 p56 / SC / d=12

If holds: var0:16 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p33 p44 north-east / SC / d=13

If holds: var0:18 var1:1 var2:0 var3:0 var4:1 var5:0 var6:1 var7:0
Execute: slew p35 p46 north-east / SC / d=13

If holds: var0:18 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p35 p44 south-east / SC / d=13

If holds: var0:8 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p22 p33 north-east / SC / d=14

If holds: var0:11 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p25 p35 / SC / d=14

If holds: var0:1 var1:0 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: take-image p12 p22 / SC / d=15

If holds: var0:3 var1:1 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p14 p25 north-east / SC / d=15

If holds: var0:29 var1:0 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p52 p12 / SC / d=16

If holds: var0:22 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: take-image p42 p52 / SC / d=17

If holds: var0:23 var1:0 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p43 p52 south-east / SC / d=17

If holds: var0:16 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: slew p33 p42 south-east / SC / d=18

If holds: var0:16 var1:0 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p33 p43 / SC / d=18

If holds: var0:9 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: slew p23 p33 / SC / d=19

If holds: var0:8 var1:0 var2:0 var3:0 var4:1 var5:0 var6:0 var7:0
Execute: slew p22 p33 north-east / SC / d=19

If holds: var0:3 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: slew p14 p23 south-east / SC / d=20

If holds: var0:2 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: slew p13 p23 / SC / d=20

If holds: var0:29 var1:0 var2:0 var3:0 var4:0 var5:0 var6:0 var7:0
Execute: slew p52 p13 north-east / SC / d=21
