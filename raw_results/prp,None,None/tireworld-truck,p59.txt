1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.010s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 71 rules.
Computing model... [0.000s CPU, 0.002s wall-clock]
162 relevant atoms
180 auxiliary atoms
342 final queue length
402 total queue pushes
Completing instantiation... [0.000s CPU, 0.001s wall-clock]
Instantiating: [0.010s CPU, 0.005s wall-clock]
Computing fact groups...
Finding invariants...
12 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
8 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.001s wall-clock]
26 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 0 = <none of those>
Removed true proposition: None = Atom free(n0)
Removed false proposition: None = NegatedAtom free(n0)
Removed false proposition: 9 = <none of those>
0 operators removed
4 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Translator variables: 10
Translator derived variables: 0
Translator facts: 37
Translator goal facts: 1
Translator mutex groups: 3
Translator total mutex groups size: 22
Translator operators: 47
Translator axioms: 0
Translator task size: 334
Translator peak memory: 19572 KB
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.010s CPU, 0.010s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
10 variables of 10 necessary
0 of 3 mutex groups necessary.
47 of 47 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 37
Preprocessor derived variables: 0
Preprocessor task size: 312
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 10
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 24 state(s).
Dead ends: 0 state(s). (0 recorded)
move-car-normal n0 n1 (1)
move-car-normal n1 n2 (1)
move-car-spiky_DETDUP_0 n2 n3 (1)
move-car-normal n3 n4 (1)
move-car-normal n4 n5 (1)
move-car-normal n5 ng (1)
Plan length: 6 step(s).
Plan cost: 6
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...

Could not close 1 of 1 open leaf states.
Investigated 5 states for the strong cyclic plan.
Went through another policy of score 0.507
Generated 82 state(s).
Dead ends: 7 state(s).

Could not close 1 of 2 open leaf states.
Investigated 7 states for the strong cyclic plan.
Went through another policy of score 0
Generated 283 state(s).
Dead ends: 23 state(s).
Generated 686 state(s).
Dead ends: 50 state(s). (46 recorded)
Generated 24 state(s).
Dead ends: 0 state(s).
Generated 3 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 5 states for the strong cyclic plan.
Went through another policy of score 0
Generated 25 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 7 states for the strong cyclic plan.
Went through another policy of score 0
Generated 28 state(s).
Dead ends: 0 state(s).
Generated 10 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 7 states for the strong cyclic plan.
Went through another policy of score 0
Generated 36 state(s).
Dead ends: 0 state(s).
Generated 6 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 9 states for the strong cyclic plan.
Went through another policy of score 0
Generated 38 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 11 states for the strong cyclic plan.
Went through another policy of score 0
Generated 34 state(s).
Dead ends: 0 state(s).
Generated 4 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 13 states for the strong cyclic plan.
Went through another policy of score 0
Generated 286 state(s).
Dead ends: 19 state(s).
Generated 709 state(s).
Dead ends: 48 state(s). (44 recorded)
Generated 9 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 23 states for the strong cyclic plan.
Went through another policy of score 0
Generated 304 state(s).
Dead ends: 0 state(s).
Generated 458 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 2 open leaf states.
Investigated 46 states for the strong cyclic plan.
Found a better policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 24 +/- 0
                       Replans: 0 +/- 0
                       Actions: 24 +/- 0
             Recorded Deadends: 53
            State-Action Pairs: 24
  Forbidden State-Action Pairs: 180
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 10.98s
              Using the policy: 5.97s
          Just-in-case Repairs: 10.98s
                Simulator time: 0s
                    Total time: 10.98s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 8784 KB

If holds: var0:6
Execute: goal / SC / d=0

If holds: var6:0 var8:0 var0:5
Execute: move-car-normal n5 ng / SC / d=1

If holds: var6:0 var5:0 var8:0 var0:4
Execute: move-car-normal n4 n5 / SC / d=2

If holds: var6:0 var5:0 var4:0 var8:0 var0:3
Execute: move-car-normal n3 n4 / SC / d=3

If holds: var6:0 var9:0 var5:0 var4:0 var7:4 var8:0 var3:0 var0:2
Execute: move-car-spiky n2 n3 / SC / d=4

If holds: var6:0 var5:0 var4:0 var7:4 var8:1 var0:3
Execute: fix n3 t1 / SC / d=4

If holds: var6:0 var9:0 var5:0 var4:0 var7:4 var8:0 var2:0 var3:0 var0:1
Execute: move-car-normal n1 n2 / SC / d=5

If holds: var6:0 var9:0 var1:0 var5:0 var4:0 var7:4 var8:0 var2:0 var3:0 var0:0
Execute: move-car-normal n0 n1 / SC / d=6

If holds: var6:0 var9:1 var5:0 var4:0 var7:4 var8:0 var2:0 var3:0 var0:0
Execute: move-truck-to-initial n1 n0 / SC / d=7

If holds: var6:0 var9:2 var1:0 var5:0 var4:0 var7:4 var8:0 var3:0 var0:0
Execute: move-truck n2 n1 / SC / d=8

If holds: var6:0 var9:3 var1:0 var5:0 var4:0 var7:4 var8:0 var2:0 var0:0
Execute: move-truck n3 n2 / SC / d=9

If holds: var6:0 var9:3 var5:0 var4:0 var7:4 var8:0 var2:0 var0:1
Execute: move-car-normal-to-initial n1 n0 / SC / d=10

If holds: var6:0 var9:3 var1:0 var5:0 var4:0 var7:4 var8:0 var0:2
Execute: move-car-normal n2 n1 / SC / d=11

If holds: var6:0 var9:3 var1:0 var5:0 var4:0 var7:0 var8:0 var0:2
Execute: droptire n3 t1 / SC / d=12

If holds: var6:0 var9:3 var5:0 var4:0 var7:0 var8:0 var2:0 var0:1
Execute: move-car-normal n1 n2 / SC / d=13

If holds: var6:0 var9:2 var5:0 var4:0 var7:0 var8:0 var3:0 var0:1
Execute: move-truck n2 n3 / SC / d=14

If holds: var6:0 var9:2 var1:0 var5:0 var4:0 var7:0 var8:0 var3:0 var0:0
Execute: move-car-normal n0 n1 / SC / d=15

If holds: var6:0 var9:1 var5:0 var4:0 var7:0 var8:0 var2:0 var3:0 var0:0
Execute: move-truck n1 n2 / SC / d=16

If holds: var6:0 var9:0 var1:0 var5:0 var4:0 var7:0 var8:0 var2:0 var3:0 var0:0
Execute: move-truck n0 n1 / SC / d=17

If holds: var6:0 var9:0 var5:0 var4:0 var7:0 var8:0 var2:0 var3:0 var0:1
Execute: move-car-normal-to-initial n1 n0 / SC / d=18

If holds: var6:0 var9:0 var1:0 var5:0 var4:0 var7:0 var8:0 var3:0 var0:2
Execute: move-car-normal n2 n1 / SC / d=19

If holds: var6:0 var9:0 var1:0 var5:0 var4:0 var7:1 var8:0 var3:0 var0:2
Execute: loadtire n0 t1 / SC / d=20

If holds: var6:0 var9:0 var5:0 var4:0 var7:1 var8:0 var2:0 var3:0 var0:1
Execute: move-car-normal n1 n2 / SC / d=21

If holds: var6:0 var9:0 var1:0 var5:0 var4:0 var7:1 var8:0 var2:0 var3:0 var0:0
Execute: move-car-normal n0 n1 / SC / d=22
