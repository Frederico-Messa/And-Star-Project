1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 31 rules.
Computing model... [0.010s CPU, 0.003s wall-clock]
325 relevant atoms
300 auxiliary atoms
625 final queue length
717 total queue pushes
Completing instantiation... [0.000s CPU, 0.002s wall-clock]
Instantiating: [0.010s CPU, 0.007s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
1 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.002s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.002s wall-clock]
26 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 0 = <none of those>
Removed false proposition: 3 = <none of those>
0 operators removed
2 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Translator variables: 4
Translator derived variables: 0
Translator facts: 58
Translator goal facts: 1
Translator mutex groups: 4
Translator total mutex groups size: 57
Translator operators: 111
Translator axioms: 0
Translator task size: 650
Translator peak memory: 19584 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.010s CPU, 0.013s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
4 variables of 4 necessary
1 of 4 mutex groups necessary.
111 of 111 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 58
Preprocessor derived variables: 0
Preprocessor task size: 595
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 4
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 21 state(s).
Dead ends: 0 state(s). (0 recorded)
move-car-normal n0 na1 (1)
move-car-normal na1 na2 (1)
move-car-normal na2 na3 (1)
move-car-normal na3 na4 (1)
move-car-normal na4 na5 (1)
move-car-spiky_DETDUP_0 na5 na6 (1)
move-car-spiky_DETDUP_0 na6 na7 (1)
move-car-normal na7 ng (1)
Plan length: 8 step(s).
Plan cost: 8
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...

Could not close 0 of 1 open leaf states.
Investigated 11 states for the strong cyclic plan.
Went through another policy of score 0
Generated 37 state(s).
Dead ends: 0 state(s).
Generated 3 state(s).
Dead ends: 1 state(s).
Generated 6 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 3 open leaf states.
Investigated 21 states for the strong cyclic plan.
Found a better policy of score 0.501
Generated 37 state(s).
Dead ends: 0 state(s).
Generated 3 state(s).
Dead ends: 1 state(s).
Generated 54 state(s).
Dead ends: 1 state(s). (1 recorded)

Could not close 0 of 3 open leaf states.
Investigated 21 states for the strong cyclic plan.
Went through another policy of score 0.487
Generated 37 state(s).
Dead ends: 0 state(s).
Generated 3 state(s).
Dead ends: 1 state(s).
Generated 3 state(s).
Dead ends: 1 state(s). (1 recorded)

Could not close 1 of 3 open leaf states.
Investigated 21 states for the strong cyclic plan.
Went through another policy of score 0.496
Generated 39 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 15 states for the strong cyclic plan.
Went through another policy of score 0
Generated 47 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 15 states for the strong cyclic plan.
Went through another policy of score 0
Generated 59 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 15 states for the strong cyclic plan.
Went through another policy of score 0
Generated 91 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 19 states for the strong cyclic plan.
Went through another policy of score 0
Generated 118 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 23 states for the strong cyclic plan.
Went through another policy of score 0
Generated 149 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 27 states for the strong cyclic plan.
Went through another policy of score 0
Generated 184 state(s).
Dead ends: 0 state(s).

Could not close 0 of 2 open leaf states.
Investigated 31 states for the strong cyclic plan.
Went through another policy of score 0
Generated 213 state(s).
Dead ends: 0 state(s).
Generated 223 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 2 open leaf states.
Investigated 35 states for the strong cyclic plan.
Went through another policy of score 0
Generated 213 state(s).
Dead ends: 0 state(s).
Generated 256 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 2 open leaf states.
Investigated 29 states for the strong cyclic plan.
Went through another policy of score 0
Generated 213 state(s).
Dead ends: 0 state(s).
Generated 285 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 2 open leaf states.
Investigated 44 states for the strong cyclic plan.
Found a better policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 22 +/- 0
                       Replans: 0 +/- 0
                       Actions: 22 +/- 0
             Recorded Deadends: 25
            State-Action Pairs: 23
  Forbidden State-Action Pairs: 62
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0.01s
 Evaluating the policy quality: 15.28s
              Using the policy: 7.1s
          Just-in-case Repairs: 15.29s
                Simulator time: 0s
                    Total time: 15.29s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 9452 KB

If holds: var3:25
Execute: goal / SC / d=0

If holds: var0:1 var3:16
Execute: move-car-normal nb17 ng / SC / d=1

If holds: var0:1 var3:15
Execute: move-car-normal nb16 nb17 / SC / d=2

If holds: var0:1 var3:14
Execute: move-car-normal nb15 nb16 / SC / d=3

If holds: var0:1 var1:0 var3:13
Execute: move-car-spiky nb14 nb15 / SC / d=4

If holds: var0:0 var1:0 var3:14
Execute: fix-1 t1 / SC / d=4

If holds: var0:1 var1:0 var3:12
Execute: move-car-normal nb13 nb14 / SC / d=5

If holds: var0:1 var1:0 var3:11
Execute: move-car-normal nb12 nb13 / SC / d=6

If holds: var0:1 var1:0 var3:10
Execute: move-car-normal nb11 nb12 / SC / d=7

If holds: var0:1 var1:0 var3:9
Execute: move-car-normal nb10 nb11 / SC / d=8

If holds: var0:1 var1:0 var3:24
Execute: move-car-normal nb9 nb10 / SC / d=9

If holds: var0:1 var1:0 var3:23
Execute: move-car-normal nb8 nb9 / SC / d=10

If holds: var0:1 var1:0 var3:22
Execute: move-car-normal nb7 nb8 / SC / d=11

If holds: var0:1 var1:0 var3:21
Execute: move-car-normal nb6 nb7 / SC / d=12

If holds: var0:1 var1:0 var3:20
Execute: move-car-normal nb5 nb6 / SC / d=13

If holds: var0:1 var1:0 var3:19
Execute: move-car-normal nb4 nb5 / SC / d=14

If holds: var0:1 var1:0 var3:18
Execute: move-car-normal nb3 nb4 / SC / d=15

If holds: var0:1 var1:0 var3:17
Execute: move-car-normal nb2 nb3 / SC / d=16

If holds: var0:1 var1:0 var3:8
Execute: move-car-normal nb1 nb2 / SC / d=17

If holds: var0:1 var1:0 var3:0
Execute: move-car-normal n0 nb1 / SC / d=18

If holds: var0:1 var1:0 var3:1
Execute: move-car-normal na1 n0 / SC / d=19

If holds: var0:1 var1:2 var2:0 var3:1
Execute: loadtire na1 t1 / SC / d=20

If holds: var0:1 var1:2 var2:0 var3:0
Execute: move-car-normal n0 na1 / SC / d=21
