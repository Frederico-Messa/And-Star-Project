1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.010s CPU, 0.001s wall-clock]
Generated 70 rules.
Computing model... [0.000s CPU, 0.008s wall-clock]
748 relevant atoms
927 auxiliary atoms
1675 final queue length
2037 total queue pushes
Completing instantiation... [0.010s CPU, 0.007s wall-clock]
Instantiating: [0.020s CPU, 0.018s wall-clock]
Computing fact groups...
Finding invariants...
21 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
10 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.003s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.010s CPU, 0.007s wall-clock]
32 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: None = Atom fire(l1)
Removed true proposition: None = Atom nfire(l1)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l2)
Removed true proposition: None = Atom nfire(l2)
Removed false proposition: None = <none of those>
Removed false proposition: 0 = <none of those>
Removed false proposition: None = Atom fire(l4)
Removed true proposition: None = Atom nfire(l4)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l5)
Removed true proposition: None = Atom nfire(l5)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l6)
Removed true proposition: None = Atom nfire(l6)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l7)
Removed true proposition: None = Atom nfire(l7)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l8)
Removed true proposition: None = Atom nfire(l8)
Removed false proposition: None = <none of those>
Removed false proposition: None = Atom fire(l9)
Removed true proposition: None = Atom nfire(l9)
Removed false proposition: None = <none of those>
Removed true proposition: None = Atom fire-unit-at(f1, l9)
Removed false proposition: None = NegatedAtom fire-unit-at(f1, l9)
Removed true proposition: None = Atom fire-unit-at(f2, l9)
Removed false proposition: None = NegatedAtom fire-unit-at(f2, l9)
Removed false proposition: 1 = <none of those>
Removed true proposition: None = Atom fire-unit-at(f4, l9)
Removed false proposition: None = NegatedAtom fire-unit-at(f4, l9)
Removed false proposition: 2 = <none of those>
Removed false proposition: 3 = <none of those>
Removed false proposition: 4 = <none of those>
Removed false proposition: 5 = <none of those>
Removed false proposition: 6 = <none of those>
Removed false proposition: 12 = <none of those>
Removed false proposition: 13 = <none of those>
Removed false proposition: 14 = <none of those>
Removed false proposition: 15 = <none of those>
Removed false proposition: 16 = <none of those>
Removed false proposition: 17 = <none of those>
Removed false proposition: 18 = <none of those>
Removed false proposition: 19 = <none of those>
0 operators removed
45 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Translator variables: 22
Translator derived variables: 0
Translator facts: 136
Translator goal facts: 2
Translator mutex groups: 15
Translator total mutex groups size: 122
Translator operators: 383
Translator axioms: 0
Translator task size: 1662
Translator peak memory: 20856 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.030s CPU, 0.032s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
22 variables of 22 necessary
0 of 15 mutex groups necessary.
383 of 383 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 136
Preprocessor derived variables: 0
Preprocessor task size: 1540
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 22
Bytes per state: 8

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 444 state(s).
Dead ends: 0 state(s). (0 recorded)
drive-fire-unit f7 l8 l5 (1)
load-fire-unit f7 l5 (1)
drive-fire-unit f7 l5 l8 (1)
unload-fire-unit_DETDUP_1 f7 l8 l3 (1)
drive-medical-unit m1 l7 l8 (1)
drive-medical-unit m1 l8 l2 (1)
load-medical-unit m1 l2 v1 (1)
drive-medical-unit m1 l2 l8 (1)
drive-medical-unit m1 l8 l6 (1)
unload-medical-unit m1 l6 v1 (1)
treat-victim-at-hospital v1 l6 (1)
Plan length: 11 step(s).
Plan cost: 11
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 12 +/- 0
                       Replans: 0 +/- 0
                       Actions: 12 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 12
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.01s
              Using the policy: 0s
          Just-in-case Repairs: 0.01s
                Simulator time: 0s
                    Total time: 0.01s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 5244 KB

If holds: var0:1 var21:0
Execute: goal / SC / d=0

If holds: var0:1 var6:13
Execute: treat-victim-at-hospital v1 l6 / SC / d=1

If holds: var0:1 var12:5 var6:0
Execute: unload-medical-unit m1 l6 v1 / SC / d=2

If holds: var0:1 var12:7 var6:0
Execute: drive-medical-unit m1 l8 l6 / SC / d=3

If holds: var0:1 var12:1 var6:0
Execute: drive-medical-unit m1 l2 l8 / SC / d=4

If holds: var0:1 var12:1 var6:9
Execute: load-medical-unit m1 l2 v1 / SC / d=5

If holds: var0:1 var12:7 var6:9
Execute: drive-medical-unit m1 l8 l2 / SC / d=6

If holds: var0:1 var12:6 var6:9
Execute: drive-medical-unit m1 l7 l8 / SC / d=7

If holds: var4:7 var10:0 var0:0 var12:6 var6:9
Execute: unload-fire-unit f7 l8 l3 / SC / d=8

If holds: var4:4 var10:0 var0:0 var12:6 var6:9
Execute: drive-fire-unit f7 l5 l8 / SC / d=9

If holds: var4:4 var0:0 var12:6 var6:9
Execute: load-fire-unit f7 l5 / SC / d=10

If holds: var4:7 var0:0 var12:6 var6:9
Execute: drive-fire-unit f7 l8 l5 / SC / d=11
