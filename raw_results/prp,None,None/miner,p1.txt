1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 54 rules.
Computing model... [0.010s CPU, 0.005s wall-clock]
525 relevant atoms
423 auxiliary atoms
948 final queue length
1082 total queue pushes
Completing instantiation... [0.000s CPU, 0.003s wall-clock]
Instantiating: [0.010s CPU, 0.010s wall-clock]
Computing fact groups...
Finding invariants...
17 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
8 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.004s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.004s wall-clock]
27 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 7 = <none of those>
Removed false proposition: 8 = <none of those>
Removed false proposition: 9 = <none of those>
Removed false proposition: 10 = <none of those>
Removed false proposition: 12 = <none of those>
0 operators removed
5 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Translator variables: 13
Translator derived variables: 0
Translator facts: 131
Translator goal facts: 2
Translator mutex groups: 7
Translator total mutex groups size: 120
Translator operators: 251
Translator axioms: 0
Translator task size: 1519
Translator peak memory: 20108 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.020s CPU, 0.022s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
13 variables of 13 necessary
0 of 7 mutex groups necessary.
251 of 251 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 131
Preprocessor derived variables: 0
Preprocessor task size: 1399
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 13
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 25 state(s).
Dead ends: 0 state(s). (0 recorded)
pick-bad-gold-1_DETDUP_0 l11 (1)
move-person l11 l12 (1)
pick-bad-gold-2_DETDUP_0 l12 (1)
move-person l12 l22 (1)
pick-bad-gold-3_DETDUP_0 l22 (1)
Plan length: 5 step(s).
Plan cost: 5
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 388 state(s).
Dead ends: 20 state(s).
Generated 20704 state(s).
Dead ends: 2119 state(s). (4 recorded)

Could not close 0 of 1 open leaf states.
Investigated 1 states for the strong cyclic plan.
Went through another policy of score 1
Generated 401 state(s).
Dead ends: 0 state(s).
Generated 17904 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 1 open leaf states.
Investigated 37 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Found a better policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 19 +/- 0
                       Replans: 0 +/- 0
                       Actions: 19 +/- 0
             Recorded Deadends: 7
            State-Action Pairs: 19
  Forbidden State-Action Pairs: 58
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0.07s
           Policy Construction: 0s
 Evaluating the policy quality: 0.01s
              Using the policy: 0.01s
          Just-in-case Repairs: 0.08s
                Simulator time: 0s
                    Total time: 0.08s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 6160 KB

If holds: var11:0 var7:3
Execute: goal / SC / d=0

If holds: var0:0 var6:0 var12:25 var11:0 var7:2
Execute: pick-good-gold-3 l92 / SC / d=1

If holds: var0:0 var6:0 var12:24 var11:0 var7:2
Execute: move-person l91 l92 / SC / d=2

If holds: var0:0 var6:0 var12:21 var11:0 var7:2
Execute: move-person l81 l91 / SC / d=3

If holds: var0:0 var5:0 var6:0 var12:21 var11:0 var7:1
Execute: pick-good-gold-2 l81 / SC / d=4

If holds: var0:0 var5:0 var6:0 var12:18 var11:0 var7:1
Execute: move-person l71 l81 / SC / d=5

If holds: var0:0 var4:0 var5:0 var6:0 var12:18 var11:0 var7:0
Execute: pick-good-gold-1 l71 / SC / d=6

If holds: var0:0 var4:0 var5:0 var6:0 var12:15 var11:0 var7:0
Execute: move-person l61 l71 / SC / d=7

If holds: var0:0 var4:0 var5:0 var6:0 var12:12 var11:0 var7:0
Execute: move-person l51 l61 / SC / d=8

If holds: var0:0 var4:0 var5:0 var6:0 var12:9 var11:0 var7:0
Execute: move-person l41 l51 / SC / d=9

If holds: var0:0 var4:0 var5:0 var6:0 var12:6 var11:0 var7:0
Execute: move-person l31 l41 / SC / d=10

If holds: var0:0 var4:0 var5:0 var6:0 var12:7 var11:0 var7:0
Execute: move-person l32 l31 / SC / d=11

If holds: var0:0 var4:0 var5:0 var6:0 var12:4 var11:0 var7:0
Execute: move-person l22 l32 / SC / d=12

If holds: var0:0 var4:0 var5:0 var6:0 var12:1 var11:0 var7:0
Execute: move-person l12 l22 / SC / d=13

If holds: var0:0 var4:0 var5:0 var6:0 var12:0 var11:0 var7:0
Execute: move-person l11 l12 / SC / d=14

If holds: var4:0 var5:0 var6:0 var12:0 var8:0 var11:0 var7:0
Execute: drop-rock-press l11 r1 / SC / d=15

If holds: var4:0 var5:0 var6:0 var12:1 var8:0 var11:0 var7:0
Execute: move-person l12 l11 / SC / d=16

If holds: var4:0 var5:0 var6:0 var12:1 var8:2 var11:0 var7:0
Execute: pick-rock l12 r1 / SC / d=17

If holds: var4:0 var5:0 var6:0 var12:0 var8:2 var11:0 var7:0
Execute: move-person l11 l12 / SC / d=18
