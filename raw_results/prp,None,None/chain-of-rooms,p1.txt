1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 23 rules.
Computing model... [0.000s CPU, 0.001s wall-clock]
132 relevant atoms
84 auxiliary atoms
216 final queue length
252 total queue pushes
Completing instantiation... [0.000s CPU, 0.001s wall-clock]
Instantiating: [0.000s CPU, 0.003s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
19 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.001s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 0 = <none of those>
Removed false proposition: 10 = <none of those>
Removed false proposition: 11 = <none of those>
Removed false proposition: 12 = <none of those>
Removed false proposition: 13 = <none of those>
Removed false proposition: 14 = <none of those>
Removed false proposition: 15 = <none of those>
Removed false proposition: 16 = <none of those>
Removed false proposition: 17 = <none of those>
Removed false proposition: 18 = <none of those>
Removed true proposition: None = Atom visited(r1)
Removed false proposition: None = NegatedAtom visited(r1)
0 operators removed
12 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.000s wall-clock]
Translator variables: 28
Translator derived variables: 0
Translator facts: 64
Translator goal facts: 9
Translator mutex groups: 10
Translator total mutex groups size: 28
Translator operators: 45
Translator axioms: 0
Translator task size: 335
Translator peak memory: 19180 KB
Writing output... [0.000s CPU, 0.000s wall-clock]
Done! [0.000s CPU, 0.007s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
28 variables of 28 necessary
0 of 10 mutex groups necessary.
45 of 45 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 64
Preprocessor derived variables: 0
Preprocessor task size: 307
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 28
Bytes per state: 4

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Switch from bucket-based to heap-based queue at key = 126, num_pushes = 50
Generated 52 state(s).
Dead ends: 0 state(s). (0 recorded)
turn_light_on_DETDUP_0 r1 (1)
move_left_right r1 r2 (1)
turn_light_on_DETDUP_0 r2 (1)
move_left_right r2 r3 (1)
turn_light_on_DETDUP_0 r3 (1)
move_left_right r3 r4 (1)
turn_light_on_DETDUP_0 r4 (1)
move_left_right r4 r5 (1)
turn_light_on_DETDUP_0 r5 (1)
move_left_right r5 r6 (1)
turn_light_on_DETDUP_0 r6 (1)
move_left_right r6 r7 (1)
turn_light_on_DETDUP_0 r7 (1)
move_left_right r7 r8 (1)
turn_light_on_DETDUP_0 r8 (1)
move_left_right r8 r9 (1)
turn_light_on_DETDUP_0 r9 (1)
move_left_right r9 r10 (1)
Plan length: 18 step(s).
Plan cost: 18
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...

Could not close 0 of 9 open leaf states.
Investigated 46 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 22 +/- 0
                       Replans: 0 +/- 0
                       Actions: 22 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 28
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.01s
              Using the policy: 0.01s
          Just-in-case Repairs: 0.01s
                Simulator time: 0s
                    Total time: 0.01s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 5088 KB

If holds: var19:0 var27:0 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: goal / SC / d=0

If holds: var9:0 var0:9 var27:0 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: move_left_right r9 r10 / SC / d=1

If holds: var18:0 var0:9 var27:0 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: turn_light_on r9 / SC / d=2

If holds: var18:1 var0:9 var27:0 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: unlock_door r9 / SC / d=2

If holds: var18:0 var8:0 var0:8 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: move_left_right r8 r9 / SC / d=3

If holds: var17:0 var18:0 var0:8 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: turn_light_on r8 / SC / d=4

If holds: var17:1 var18:0 var0:8 var26:0 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: unlock_door r8 / SC / d=4

If holds: var17:0 var18:0 var7:0 var0:7 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: move_left_right r7 r8 / SC / d=5

If holds: var16:0 var17:0 var18:0 var0:7 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: turn_light_on r7 / SC / d=6

If holds: var16:1 var17:0 var18:0 var0:7 var25:0 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: unlock_door r7 / SC / d=6

If holds: var16:0 var17:0 var18:0 var6:0 var0:6 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: move_left_right r6 r7 / SC / d=7

If holds: var15:0 var16:0 var17:0 var18:0 var0:6 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: turn_light_on r6 / SC / d=8

If holds: var15:1 var16:0 var17:0 var18:0 var0:6 var24:0 var23:0 var22:0 var21:0 var20:0
Execute: unlock_door r6 / SC / d=8

If holds: var15:0 var16:0 var17:0 var18:0 var5:0 var0:5 var23:0 var22:0 var21:0 var20:0
Execute: move_left_right r5 r6 / SC / d=9

If holds: var14:0 var15:0 var16:0 var17:0 var18:0 var0:5 var23:0 var22:0 var21:0 var20:0
Execute: turn_light_on r5 / SC / d=10

If holds: var14:1 var15:0 var16:0 var17:0 var18:0 var0:5 var23:0 var22:0 var21:0 var20:0
Execute: unlock_door r5 / SC / d=10

If holds: var14:0 var15:0 var16:0 var17:0 var18:0 var4:0 var0:4 var22:0 var21:0 var20:0
Execute: move_left_right r4 r5 / SC / d=11

If holds: var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:4 var22:0 var21:0 var20:0
Execute: turn_light_on r4 / SC / d=12

If holds: var13:1 var14:0 var15:0 var16:0 var17:0 var18:0 var0:4 var22:0 var21:0 var20:0
Execute: unlock_door r4 / SC / d=12

If holds: var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var3:0 var0:3 var21:0 var20:0
Execute: move_left_right r3 r4 / SC / d=13

If holds: var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:3 var21:0 var20:0
Execute: turn_light_on r3 / SC / d=14

If holds: var12:1 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:3 var21:0 var20:0
Execute: unlock_door r3 / SC / d=14

If holds: var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var2:0 var0:2 var20:0
Execute: move_left_right r2 r3 / SC / d=15

If holds: var11:0 var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:2 var20:0
Execute: turn_light_on r2 / SC / d=16

If holds: var11:1 var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:2 var20:0
Execute: unlock_door r2 / SC / d=16

If holds: var11:0 var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var1:0 var0:0
Execute: move_left_right r1 r2 / SC / d=17

If holds: var10:0 var11:0 var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:0
Execute: turn_light_on r1 / SC / d=18

If holds: var10:1 var11:0 var12:0 var13:0 var14:0 var15:0 var16:0 var17:0 var18:0 var0:0
Execute: unlock_door r1 / SC / d=18
