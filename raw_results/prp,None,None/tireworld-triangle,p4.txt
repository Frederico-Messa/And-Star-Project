1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Warning: Atom spare-in(l-9-1) is specified twice in initial state specification
Parsing: [0.000s CPU, 0.015s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 14 rules.
Computing model... [0.000s CPU, 0.004s wall-clock]
584 relevant atoms
437 auxiliary atoms
1021 final queue length
1164 total queue pushes
Completing instantiation... [0.000s CPU, 0.003s wall-clock]
Instantiating: [0.000s CPU, 0.009s wall-clock]
Computing fact groups...
Finding invariants...
5 initial candidates
Finding invariants: [0.010s CPU, 0.000s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
28 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.003s wall-clock]
107 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 28 = <none of those>
0 operators removed
1 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.001s wall-clock]
Translator variables: 29
Translator derived variables: 0
Translator facts: 101
Translator goal facts: 1
Translator mutex groups: 1
Translator total mutex groups size: 45
Translator operators: 187
Translator axioms: 0
Translator task size: 1031
Translator peak memory: 19840 KB
Writing output... [0.000s CPU, 0.001s wall-clock]
Done! [0.010s CPU, 0.030s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
29 variables of 29 necessary
0 of 1 mutex groups necessary.
187 of 187 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 101
Preprocessor derived variables: 0
Preprocessor task size: 986
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 29
Bytes per state: 8

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 32 state(s).
Dead ends: 0 state(s). (0 recorded)
move-car_DETDUP_0 l-1-1 l-1-2 (1)
move-car_DETDUP_0 l-1-2 l-1-3 (1)
move-car_DETDUP_0 l-1-3 l-1-4 (1)
move-car_DETDUP_0 l-1-4 l-1-5 (1)
move-car_DETDUP_0 l-1-5 l-1-6 (1)
move-car_DETDUP_0 l-1-6 l-1-7 (1)
move-car_DETDUP_0 l-1-7 l-1-8 (1)
move-car_DETDUP_0 l-1-8 l-1-9 (1)
Plan length: 8 step(s).
Plan cost: 8
Initial search time: 0s
Initial total time: 0s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 42 state(s).
Dead ends: 0 state(s).
Generated 5 state(s).
Dead ends: 5 state(s).
Generated 35 state(s).
Dead ends: 1 state(s). (1 recorded)
Generated 5 state(s).
Dead ends: 5 state(s).
Generated 25 state(s).
Dead ends: 1 state(s). (1 recorded)
Generated 5 state(s).
Dead ends: 5 state(s).
Generated 14 state(s).
Dead ends: 1 state(s). (1 recorded)

Could not close 0 of 19 open leaf states.
Investigated 46 states for the strong cyclic plan.
Went through another policy of score 1
Generated 47 state(s).
Dead ends: 0 state(s).

Could not close 0 of 16 open leaf states.
Investigated 49 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Found a better policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 22 +/- 0
                       Replans: 0 +/- 0
                       Actions: 22 +/- 0
             Recorded Deadends: 19
            State-Action Pairs: 47
  Forbidden State-Action Pairs: 60
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0.02s
              Using the policy: 0.02s
          Just-in-case Repairs: 0.03s
                Simulator time: 0s
                    Total time: 0.03s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 5912 KB

If holds: var28:8
Execute: goal / SC / d=0

If holds: var0:0 var28:16
Execute: move-car l-2-8 l-1-9 / SC / d=1

If holds: var8:0 var28:16
Execute: changetire l-2-8 / SC / d=2

If holds: var8:0 var0:0 var28:23
Execute: move-car l-3-7 l-2-8 / SC / d=2

If holds: var8:0 var10:0 var28:23
Execute: changetire l-3-7 / SC / d=3

If holds: var8:0 var10:0 var0:0 var28:29
Execute: move-car l-4-6 l-3-7 / SC / d=3

If holds: var8:0 var10:0 var16:0 var28:29
Execute: changetire l-4-6 / SC / d=4

If holds: var8:0 var10:0 var16:0 var0:0 var28:34
Execute: move-car l-5-5 l-4-6 / SC / d=4

If holds: var8:0 var10:0 var16:0 var18:0 var28:34
Execute: changetire l-5-5 / SC / d=5

If holds: var8:0 var10:0 var16:0 var18:0 var0:0 var28:38
Execute: move-car l-6-4 l-5-5 / SC / d=5

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var28:38
Execute: changetire l-6-4 / SC / d=6

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var0:0 var28:41
Execute: move-car l-7-3 l-6-4 / SC / d=6

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var28:41
Execute: changetire l-7-3 / SC / d=7

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var0:0 var28:43
Execute: move-car l-8-2 l-7-3 / SC / d=7

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var26:0 var28:43
Execute: changetire l-8-2 / SC / d=8

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var26:0 var0:0 var28:44
Execute: move-car l-9-1 l-8-2 / SC / d=8

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var26:0 var27:0 var28:44
Execute: changetire l-9-1 / SC / d=9

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var26:0 var27:0 var0:0 var28:42
Execute: move-car l-8-1 l-9-1 / SC / d=9

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var25:0 var26:0 var27:0 var28:42
Execute: changetire l-8-1 / SC / d=10

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:39
Execute: move-car l-7-1 l-8-1 / SC / d=10

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:39
Execute: changetire l-7-1 / SC / d=11

If holds: var8:0 var10:0 var16:0 var18:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:35
Execute: move-car l-6-1 l-7-1 / SC / d=11

If holds: var8:0 var10:0 var16:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:35
Execute: changetire l-6-1 / SC / d=12

If holds: var8:0 var10:0 var16:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:30
Execute: move-car l-5-1 l-6-1 / SC / d=12

If holds: var8:0 var10:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:30
Execute: changetire l-5-1 / SC / d=13

If holds: var8:0 var10:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:24
Execute: move-car l-4-1 l-5-1 / SC / d=13

If holds: var8:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:24
Execute: changetire l-4-1 / SC / d=14

If holds: var8:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:17
Execute: move-car l-3-1 l-4-1 / SC / d=14

If holds: var8:0 var9:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:17
Execute: changetire l-3-1 / SC / d=15

If holds: var8:0 var9:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:9
Execute: move-car l-2-1 l-3-1 / SC / d=15

If holds: var1:0 var8:0 var9:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var28:9
Execute: changetire l-2-1 / SC / d=16

If holds: var1:0 var8:0 var9:0 var10:0 var11:0 var16:0 var17:0 var18:0 var19:0 var22:0 var23:0 var24:0 var25:0 var26:0 var27:0 var0:0 var28:0
Execute: move-car l-1-1 l-2-1 / SC / d=16

If holds: var0:0 var28:23
Execute: move-car l-3-7 l-2-8 / NSC / d=2

If holds: var0:0 var28:29
Execute: move-car l-4-6 l-3-7 / NSC / d=3

If holds: var0:0 var28:34
Execute: move-car l-5-5 l-4-6 / NSC / d=4

If holds: var0:0 var28:38
Execute: move-car l-6-4 l-5-5 / NSC / d=5

If holds: var0:0 var28:41
Execute: move-car l-7-3 l-6-4 / NSC / d=6

If holds: var0:0 var28:43
Execute: move-car l-8-2 l-7-3 / NSC / d=7

If holds: var0:0 var28:44
Execute: move-car l-9-1 l-8-2 / NSC / d=8

If holds: var0:0 var28:42
Execute: move-car l-8-1 l-9-1 / NSC / d=9

If holds: var0:0 var28:39
Execute: move-car l-7-1 l-8-1 / NSC / d=10

If holds: var0:0 var28:35
Execute: move-car l-6-1 l-7-1 / NSC / d=11

If holds: var0:0 var28:30
Execute: move-car l-5-1 l-6-1 / NSC / d=12

If holds: var0:0 var28:24
Execute: move-car l-4-1 l-5-1 / NSC / d=13

If holds: var0:0 var28:17
Execute: move-car l-3-1 l-4-1 / NSC / d=14

If holds: var0:0 var28:9
Execute: move-car l-2-1 l-3-1 / NSC / d=15

If holds: var0:0 var28:0
Execute: move-car l-1-1 l-2-1 / NSC / d=16
