1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 67 rules.
Computing model... [0.030s CPU, 0.020s wall-clock]
2506 relevant atoms
2104 auxiliary atoms
4610 final queue length
8405 total queue pushes
Completing instantiation... [0.030s CPU, 0.040s wall-clock]
Instantiating: [0.060s CPU, 0.063s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
9 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.003s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.040s CPU, 0.044s wall-clock]
1080 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 9 = <none of those>
Removed false proposition: 10 = <none of those>
Removed false proposition: 11 = <none of those>
Removed false proposition: 12 = <none of those>
Removed false proposition: 13 = <none of those>
Removed false proposition: 14 = <none of those>
Removed false proposition: 15 = <none of those>
Removed false proposition: 16 = <none of those>
0 operators removed
8 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.006s wall-clock]
Translator variables: 17
Translator derived variables: 0
Translator facts: 98
Translator goal facts: 12
Translator mutex groups: 9
Translator total mutex groups size: 89
Translator operators: 1664
Translator axioms: 0
Translator task size: 11184
Translator peak memory: 26880 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.130s CPU, 0.128s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
17 variables of 17 necessary
1 of 9 mutex groups necessary.
1664 of 1664 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 98
Preprocessor derived variables: 0
Preprocessor task size: 11104
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 17
Bytes per state: 8

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 331 state(s).
Dead ends: 0 state(s). (0 recorded)
pick-tower_DETDUP_1 b7 b2 b5 (1)
put-down b2 (1)
pick-up_DETDUP_0 b3 b1 (1)
put-on-block_DETDUP_0 b3 b7 (1)
pick-up_DETDUP_0 b5 b6 (1)
put-on-block_DETDUP_0 b5 b1 (1)
pick-up_DETDUP_0 b6 b8 (1)
put-on-block_DETDUP_0 b6 b2 (1)
pick-tower_DETDUP_1 b3 b7 b2 (1)
put-on-block_DETDUP_0 b7 b6 (1)
pick-up-from-table_DETDUP_1 b8 (1)
put-on-block_DETDUP_0 b8 b5 (1)
Plan length: 12 step(s).
Plan cost: 12
Initial search time: 0s
Initial total time: 0.01s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 10 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).
Generated 9 state(s).
Dead ends: 0 state(s).

Could not close 0 of 4 open leaf states.
Investigated 31 states for the strong cyclic plan.
Went through another policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 27 +/- 0
                       Replans: 0 +/- 0
                       Actions: 27 +/- 0
             Recorded Deadends: 0
            State-Action Pairs: 17
  Forbidden State-Action Pairs: 0
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 0s
           Policy Construction: 0s
 Evaluating the policy quality: 0s
              Using the policy: 0s
          Just-in-case Repairs: 0.01s
                Simulator time: 0s
                    Total time: 0.02s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 8420 KB

If holds: var9:9 var10:9 var13:1 var14:2 var15:6 var11:7 var2:0 var12:9 var3:0 var16:5 var7:0 var8:0
Execute: goal / SC / d=0

If holds: var4:0 var9:9 var10:9 var13:1 var14:2 var15:6 var11:7 var2:0 var12:9 var3:0 var16:0
Execute: put-on-block b8 b5 / SC / d=1

If holds: var4:0 var9:9 var10:9 var13:1 var14:2 var15:6 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0 var8:0
Execute: pick-up-from-table b8 / SC / d=2

If holds: var4:0 var5:0 var9:9 var10:9 var13:1 var14:2 var15:0 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0
Execute: put-on-block b7 b6 / SC / d=3

If holds: var4:0 var5:0 var9:9 var10:9 var13:1 var14:2 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0 var8:0
Execute: pick-tower b3 b7 b2 / SC / d=4

If holds: var4:0 var5:0 var6:0 var9:9 var10:9 var13:1 var14:2 var15:9 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0 var8:0
Execute: pick-up-from-table b7 / SC / d=4

If holds: var1:0 var4:0 var9:9 var10:9 var13:1 var14:0 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0
Execute: put-on-block b6 b2 / SC / d=5

If holds: var1:0 var4:0 var5:0 var9:9 var10:9 var13:1 var14:8 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-up b6 b8 / SC / d=6

If holds: var1:0 var4:0 var5:0 var9:9 var10:9 var13:1 var14:9 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var7:0 var8:0
Execute: pick-up-from-table b6 / SC / d=6

If holds: var0:0 var1:0 var5:0 var9:9 var10:9 var13:0 var14:8 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9
Execute: put-on-block b5 b1 / SC / d=7

If holds: var0:0 var1:0 var4:0 var9:9 var10:9 var13:6 var14:8 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-up b5 b6 / SC / d=8

If holds: var0:0 var1:0 var4:0 var5:0 var9:9 var10:9 var13:9 var14:8 var15:2 var11:7 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-up-from-table b5 / SC / d=8

If holds: var0:0 var1:0 var4:0 var6:0 var9:9 var10:9 var13:6 var14:8 var15:2 var11:0 var12:9 var3:0 var16:9
Execute: put-on-block b3 b7 / SC / d=9

If holds: var1:0 var4:0 var6:0 var9:9 var10:9 var13:6 var14:8 var15:2 var11:1 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-up b3 b1 / SC / d=10

If holds: var0:0 var1:0 var4:0 var6:0 var9:9 var10:9 var13:6 var14:8 var15:2 var11:9 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-up-from-table b3 / SC / d=10

If holds: var4:0 var6:0 var9:9 var10:0 var13:6 var14:8 var15:2 var11:1 var2:0 var12:9 var3:0 var16:9
Execute: put-down b2 / SC / d=11

If holds: var6:0 var9:9 var10:5 var13:6 var14:8 var15:2 var11:1 var2:0 var12:9 var3:0 var16:9 var8:0
Execute: pick-tower b7 b2 b5 / SC / d=12
