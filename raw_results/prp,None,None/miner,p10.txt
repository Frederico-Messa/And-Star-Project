1. Running translator
Second argument is a file name: use two translator arguments.
Parsing...
Parsing: [0.010s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 54 rules.
Computing model... [0.010s CPU, 0.015s wall-clock]
2186 relevant atoms
1566 auxiliary atoms
3752 final queue length
4433 total queue pushes
Completing instantiation... [0.020s CPU, 0.017s wall-clock]
Instantiating: [0.030s CPU, 0.036s wall-clock]
Computing fact groups...
Finding invariants...
17 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
10 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.021s wall-clock]
36 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
Removed false proposition: 9 = <none of those>
Removed false proposition: 10 = <none of those>
Removed false proposition: 11 = <none of those>
Removed false proposition: 12 = <none of those>
Removed false proposition: 13 = <none of those>
Removed false proposition: 14 = <none of those>
Removed false proposition: 15 = <none of those>
Removed false proposition: 16 = <none of those>
Removed false proposition: 17 = <none of those>
Removed false proposition: 18 = <none of those>
Removed false proposition: 19 = <none of those>
Removed false proposition: 20 = <none of those>
Removed false proposition: 21 = <none of those>
Removed false proposition: 22 = <none of those>
Removed false proposition: 23 = <none of those>
Removed false proposition: 25 = <none of those>
0 operators removed
16 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.003s wall-clock]
Translator variables: 26
Translator derived variables: 0
Translator facts: 638
Translator goal facts: 2
Translator mutex groups: 18
Translator total mutex groups size: 623
Translator operators: 1282
Translator axioms: 0
Translator task size: 7673
Translator peak memory: 24100 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.075s wall-clock]

2. Running preprocessor
Building causal graph...
The causal graph is not acyclic.
26 variables of 26 necessary
0 of 18 mutex groups necessary.
1282 of 1282 operators necessary.
0 of 0 axiom rules necessary.
Building domain transition graphs...
solveable in poly time 0
Building successor generator...
Preprocessor facts: 638
Preprocessor derived variables: 0
Preprocessor task size: 7050
Writing output...
done


3. Running search
./planner_prp/src/search/downward ipc policy-repair --dump-policy 2
This is a unit task.
./planner_prp/src/search/downward-release --heuristic "h=ff(cost_type=1)" --search "lazy_greedy([h],preferred=[h])" --random-seed 814102613 --dump-policy 2 < output
Simplifying transitions... done!
Variables: 26
Bytes per state: 16

Total allotted time (s): 1800
Max time for core JIC (remaining used in final-round repairs): 1800
Max time for each of the 1 epochs: 1800

 !! Warning: Disabling the simplification of unary operators !!
 !!           to keep the non-deterministic planning sound.  !!
Generated 41 state(s).
Dead ends: 0 state(s). (0 recorded)
move-person l11 l21 (1)
pick-bad-gold-1_DETDUP_0 l21 (1)
move-person l21 l22 (1)
pick-bad-gold-2_DETDUP_0 l22 (1)
move-person l22 l23 (1)
move-person l23 l33 (1)
pick-bad-gold-3_DETDUP_0 l33 (1)
Plan length: 7 step(s).
Plan cost: 7
Initial search time: 0s
Initial total time: 0.01s


Creating the simulator...


Regressing the plan...


Generating an initial policy...


Computing just-in-time repairs...
Generated 3 state(s).
Dead ends: 0 state(s).

Could not close 0 of 1 open leaf states.
Investigated 3 states for the strong cyclic plan.
Went through another policy of score 0
Generated 538 state(s).
Dead ends: 0 state(s).
Generated 40614527 state(s).
Dead ends: 0 state(s). (0 recorded)

Could not close 0 of 1 open leaf states.
Investigated 25 states for the strong cyclic plan.
Found a better policy of score 1

Could not close 0 of 0 open leaf states.
Investigated 1 states for the strong cyclic plan.
Marking policy strong cyclic.
Went through another policy of score 1


Running a final SCD check...


Running the simulation...
...achieved the goal!



                  -{ General Statistics }-

        FSAP Combination Count: 0
       Monotonicity violations: 0
             Successful states: 13 +/- 0
                       Replans: 0 +/- 0
                       Actions: 13 +/- 0
             Recorded Deadends: 3
            State-Action Pairs: 13
  Forbidden State-Action Pairs: 39
               Strongly Cyclic: True
                  Policy Score: 1
                     Succeeded: 1 / 1
 Depth limit (of 1000) reached: 0 / 1


                  -{ Timing Statistics }-

        Regression Computation: 0s
         Engine Initialization: 0s
                   Search Time: 148.25s
           Policy Construction: 0s
 Evaluating the policy quality: 2.95s
              Using the policy: 1.5s
          Just-in-case Repairs: 151.21s
                Simulator time: 0s
                    Total time: 151.22s



Dumping the policy and fsaps...
Strong cyclic plan found.
Peak memory: 1046752 KB

If holds: var24:0 var9:3
Execute: goal / SC / d=0

If holds: var7:0 var0:0 var25:35 var24:0 var9:2
Execute: pick-good-gold-3 l81 / SC / d=1

If holds: var7:0 var0:0 var25:30 var24:0 var9:2
Execute: move-person l71 l81 / SC / d=2

If holds: var6:0 var7:0 var0:0 var25:30 var24:0 var9:1
Execute: pick-good-gold-2 l71 / SC / d=3

If holds: var6:0 var7:0 var0:0 var25:25 var24:0 var9:1
Execute: move-person l61 l71 / SC / d=4

If holds: var5:0 var6:0 var7:0 var0:0 var25:25 var24:0 var9:0
Execute: pick-good-gold-1 l61 / SC / d=5

If holds: var5:0 var6:0 var7:0 var0:0 var25:20 var24:0 var9:0
Execute: move-person l51 l61 / SC / d=6

If holds: var5:0 var6:0 var7:0 var0:0 var25:15 var24:0 var9:0
Execute: move-person l41 l51 / SC / d=7

If holds: var5:0 var6:0 var7:0 var0:0 var25:10 var24:0 var9:0
Execute: move-person l31 l41 / SC / d=8

If holds: var5:0 var6:0 var7:0 var0:0 var25:5 var24:0 var9:0
Execute: move-person l21 l31 / SC / d=9

If holds: var5:0 var6:0 var7:0 var0:0 var25:0 var24:0 var9:0
Execute: move-person l11 l21 / SC / d=10

If holds: var5:0 var6:0 var7:0 var25:0 var10:0 var24:0 var9:0
Execute: drop-rock-press l11 r1 / SC / d=11

If holds: var5:0 var6:0 var7:0 var25:0 var10:1 var24:0 var9:0
Execute: pick-rock l11 r1 / SC / d=12
